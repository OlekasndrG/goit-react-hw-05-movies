{"version":3,"file":"static/js/847.0941b863.chunk.js","mappings":"mPA6FA,UAlFqB,WAAO,IAAD,IAChBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAuB3D,OArBAC,EAAAA,EAAAA,YAAU,WACPX,GAAa,GACb,IAAMY,EAAU,mCAAG,8GAEKC,EAAAA,EAAAA,GAAM,sCAAD,OACkBjB,EADlB,oBAfnB,mCAemB,oBAFV,cAEPkB,EAFO,OAKbZ,EAASY,EAAIC,MALA,kBAQND,EAAIC,MARE,yDAUNX,EAAS,KAAMY,UAVT,yDAAH,qDAahBJ,IAIIK,SAAQ,kBAAMjB,GAAa,EAAnB,GACd,GAAE,CAACJ,KAED,iCACG,SAAC,KAAD,CAAMsB,GAAIX,EAAoBY,QAA9B,qBACClB,IACE,UAAC,KAAD,YACG,0BACG,gBACGmB,IACGnB,EAAMoB,YAAN,6CAC2CpB,EAAMoB,aAC5C,sEAERC,MAAM,QACNC,IAAKtB,EAAMuB,WAGjB,UAAC,KAAD,YACG,0BACIvB,EAAMuB,MADV,KAEIvB,EAAMwB,aAAaC,MAAM,IAAIC,MAAM,EAAG,GAAGC,KAAK,IAFlD,QAIA,uCACA,uBAAI3B,EAAM4B,YACV,yCACA,kDAAwC,GAArB5B,EAAM6B,cAAzB,QACA,4BACG,qCACC7B,EAAM8B,OAAOC,OAAS,EACpB/B,EAAM8B,OAAOE,KAAI,SAAAC,GACd,OAAO,uBAAmBA,EAAMC,MAAjBD,EAAME,GACvB,KAED,qFAMdrC,IAAa,SAAC,IAAD,IACbI,IAAS,sCAAcA,MACxB,0BACG,SAAC,KAAD,CAAMe,GAAG,UAAT,wBAEH,0BACG,SAAC,KAAD,CAAMA,GAAG,OAAT,qBAEH,SAAC,EAAAmB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACG,SAAC,KAAD,QAIX,C","sources":["pages/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\nimport {\n   DescriptionContainer,\n   MovieDetailContainer,\n} from 'components/Layout.styled';\nimport Loader from 'components/Loader/Loader';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nconst API_KEY = 'ba542000abc8f23c21b9168c238e4f34';\n\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\nconst MovieDetails = () => {\n   const { movieId } = useParams();\n   const [isLoading, setIsloading] = useState(false);\n   const [movie, setMovie] = useState(null);\n   const [error, setError] = useState(null);\n   const location = useLocation();\n   const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n\n   useEffect(() => {\n      setIsloading(true);\n      const fetchMovie = async () => {\n         try {\n            const res = await axios(\n               `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n            );\n            setMovie(res.data);\n          \n\n            return res.data;\n         } catch (error) {\n            return setError(error.message);\n         }\n      };\n      fetchMovie()\n         // .then(res => {\n         //    setMovie(res.data);\n         // })\n         .finally(() => setIsloading(false));\n   }, [movieId]);\n   return (\n      <>\n         <Link to={backLinkLocationRef.current}>go back</Link>\n         {movie && (\n            <MovieDetailContainer>\n               <div>\n                  <img\n                     src={\n                        movie.poster_path\n                           ? `https://www.themoviedb.org/t/p/w500${movie.poster_path}`\n                           : 'https://www.themoviedb.org/t/p/w500/q9qKbux5Jo76Sj8g3luxBt6rYtz.jpg'\n                     }\n                     width=\"280px\"\n                     alt={movie.title}\n                  />\n               </div>\n               <DescriptionContainer>\n                  <h2>\n                     {movie.title} (\n                     {movie.release_date.split('').slice(0, 4).join('')})\n                  </h2>\n                  <h3>Overview </h3>\n                  <p>{movie.overview}</p>\n                  <h3>User Score </h3>\n                  <p>User Score: {`${movie.vote_average * 10}`}%</p>\n                  <div>\n                     <h3> Genres </h3>\n                     {movie.genres.length > 0 ? (\n                        movie.genres.map(genre => {\n                           return <p key={genre.id}>{genre.name}</p>;\n                        })\n                     ) : (\n                        <p>Відсутні</p>\n                     )}\n                  </div>\n               </DescriptionContainer>\n            </MovieDetailContainer>\n         )}\n         {isLoading && <Loader />}\n         {error && <p>Pomulka : {error}</p>}\n         <div>\n            <Link to=\"reviews\">reviews</Link>\n         </div>\n         <div>\n            <Link to=\"cast\">cast</Link>\n         </div>\n         <Suspense fallback={<Loader />}>\n            <Outlet />\n         </Suspense>\n      </>\n   );\n};\n\nexport default MovieDetails;\n"],"names":["movieId","useParams","useState","isLoading","setIsloading","movie","setMovie","error","setError","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","fetchMovie","axios","res","data","message","finally","to","current","src","poster_path","width","alt","title","release_date","split","slice","join","overview","vote_average","genres","length","map","genre","name","id","Suspense","fallback"],"sourceRoot":""}