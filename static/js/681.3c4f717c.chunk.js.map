{"version":3,"file":"static/js/681.3c4f717c.chunk.js","mappings":"kOAyDA,UA9CqB,WAClB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAjBAC,EAAAA,EAAAA,YAAU,WACPH,GAAa,GACb,IAAMI,EAAU,mCAAG,8GAGKC,EAAAA,EAAAA,GAAM,uCAAD,OACmBX,EADnB,4EAHV,OAGPY,EAHO,OAMbR,EAASQ,EAAIC,KAAKC,SANL,yEASNN,EAAS,KAAMO,UATT,yDAAH,qDAYhBL,IAAaM,SAAQ,kBAAMV,GAAa,EAAnB,GACvB,GAAE,CAACN,KAGD,2BACIK,IAAa,mCACbE,IAAS,sCAAcA,MACxB,wBACIJ,EAAMc,OAAS,EACbd,EAAMe,KAAI,SAAAf,GACP,OACG,yBACG,4BACG,wBAAKA,EAAMgB,UACX,uBAAIhB,EAAMiB,eAHPC,EAAAA,EAAAA,MAOd,KAED,+GAKd,C,uDCvDM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=ba542000abc8f23c21b9168c238e4f34&language=en-US&page=1\n\nimport axios from 'axios';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// import { lazy, Suspense } from 'react';\n\n// const MyComponent = lazy(() => import('path/to/MyComponent'));\n// const API_KEY = 'ba542000abc8f23c21b9168c238e4f34';\n\nconst MovieReviews = () => {\n   const { movieId } = useParams();\n\n   const [movie, setMovie] = useState([]);\n   const [isLoading, setIsloading] = useState(false);\n   const [error, setError] = useState(null);\n   useEffect(() => {\n      setIsloading(true);\n      const fetchMovie = async () => {\n         try {\n            // setIsloading(true);\n            const res = await axios(\n               ` https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=ba542000abc8f23c21b9168c238e4f34&language=en-US&page=1`\n            );\n            setMovie(res.data.results);\n            // return res.data;\n         } catch (error) {\n            return setError(error.message);\n         }\n      };\n      fetchMovie().finally(() => setIsloading(false));\n   }, [movieId]);\n\n   return (\n      <div>\n         {isLoading && <p>Loading</p>}\n         {error && <p>Pomulka : {error}</p>}\n         <ul>\n            {movie.length > 0 ? (\n               movie.map(movie => {\n                  return (\n                     <li key={nanoid()}>\n                        <div>\n                           <h3>{movie.author}</h3>\n                           <p>{movie.content}</p>\n                        </div>\n                     </li>\n                  );\n               })\n            ) : (\n               <p>Немає відгуків</p>\n            )}\n         </ul>\n      </div>\n   );\n};\nexport default MovieReviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","movie","setMovie","isLoading","setIsloading","error","setError","useEffect","fetchMovie","axios","res","data","results","message","finally","length","map","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}